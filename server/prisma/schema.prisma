// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl ="postgres://ydvvohurwaodhv:458c7e12692e19b0aef4fe1583cc627d6bfb1645f414ee595814cea641abeba4@ec2-54-157-79-121.compute-1.amazonaws.com:5432/d21j4n8k6iqlnf"
}

model RoleType{
id Int @id @default(autoincrement())
description String
User User[]
}

model Category{
id Int @id @default(autoincrement())
description String
Place Place[]
}

model Orientation{
id Int @id @default(autoincrement())
description String
Place Place[]
}

model User{
id Int @id @default(autoincrement())
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
email String @unique
hash String
name String
phoneNumber String
gender String
roleTypeId Int 
RoleType RoleType @relation(fields: [roleTypeId], references: [id])
Place Place[]
Review Review[]
@@map("users")
}

model Place{
id Int @id @default(autoincrement())
name String
city String
district String
address String
location String?
phoneNumber String?
email String?
website String?
sector String
categoryId Int
orientationId Int
managerId Int?
hasReservation Boolean
description String
image String
Category Category @relation(fields: [categoryId], references: [id])
Manager User? @relation(fields: [managerId], references: [id])
Orientation Orientation @relation(fields: [orientationId], references: [id])
Review Review[]
@@map("places")
}

model Review{
id Int @id @default(autoincrement())
feedback String
rating Int
placeId Int
userId Int
Place Place @relation(fields: [placeId], references: [id])
User User @relation(fields: [userId], references: [id])
@@map("reviews")
}
